// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assign_to_undefined.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "u"
  .pname	p2, "v"
  set_reg	nil, p1
  set_reg	nil, p2
  .ret	"
`;

exports[`call_with_computation.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "v"
  sub	p1, 1, A
  set_number	p1, A, nil
  .ret	"
`;

exports[`if_unit_type.ts 1`] = `
"test:
  .name	"test"
  .pname	p1, "a"
  unit_type	p1, :l2, :l1, :l3
  jump	:l3
l1:
  notify	$txt="Bot"
  jump	:l0
l2:
  notify	$txt="Building"
  jump	:l0
l3:
  notify	$txt="Other"
  jump	:l0
l0:
  .ret	"
`;

exports[`literals.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "v"
  set_reg	5, A
  check_battery	nil, A
label0:
  set_reg	nil, p1
  check_battery	nil, p1
label1:
  set_reg	1, p1
  check_battery	nil, p1
label2:
  set_reg	c_battery, p1
  check_battery	nil, p1
label3:
  set_reg	c_small_relay@2, p1
  check_battery	nil, p1
label4:
  set_reg	10 20, p1
  check_battery	nil, p1
label5:
  set_number	p1, 30, p1
  count_item	c_battery, p1
  count_item	c_battery, p1
  count_item	p1, p1
  sub	p1, 1, p1
  add	p1, 1, p1
  set_reg	c_battery, nil
  set_reg	10, B
  add	B, 1, nil
  .ret	"
`;

exports[`nested_sub.ts 1`] = `
"foo:
  .name	"foo"
  call	$sub=:sub1
  .ret	


sub1:
  .sub	
  .name	"sub1"
  call	$sub=:sub2
  .ret	


sub2:
  .sub	
  .name	"sub2"
  notify	$txt="hello world"
  .ret	"
`;

exports[`numeric_compare.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "v"
  get_battery	A
  check_number	:l0, :l1, A, 20
  jump	:l0
l1:
  gethome	D
  domove	D
  .ret	
  jump	:l0
l0:
  get_self	C
  get_health	C, B
  check_number	:l4, :l3, B, 50
  jump	:l3
l3:
  gethome	D
  domove	D
  jump	:l2
l4:
  notify	$txt="ok"
  jump	:l2
l2:
  .ret	"
`;

exports[`rng.ts 1`] = `
"rng:
  .name	"rng"
  .pname	p1, "max"
  .pname	p2, "min"
  .pname	p3, "state"
  unlock	
  sub	p1, p2, B
  add	B, 1, A
  check_number	:l0, :l1, p3, 0
  jump	:l1
l1:
  faction_item_amount	metalore, p3, nil
label0:
  jump	:l0
l0:
  mul	17364, p3, D
  add	D, 1, C
  modulo	C, 65521, p3
  .pname	p4
  .out	p4
  mul	A, p3, F
  div	F, 65521, E
  add	E, p2, p4
  .ret	
  .ret	"
`;

exports[`switch_no_default.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "v"
  value_type	p1, :l0, :l0, :l0, :l0, :l0, :l0
  jump	:l1
l1:
  notify	$txt="No Match"
  jump	:l0
l0:
  .ret	"
`;

exports[`test1.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "v"
  check_battery	:l1
  jump	:l0
l1:
  .ret	
  jump	:l0
l0:
  solve	p1, A, :l3
  jump	:l4
l3:
  notify	$txt="no solution"
  jump	:l2
l4:
  notify	$txt="solved"
  jump	:l2
l2:
  value_type	A, :l6, :l7, :l8, :l9, :l9, :l9
  jump	:l9
l6:
  set_reg	1, nil
  jump	:l5
l7:
  set_reg	2, nil
  jump	:l5
l8:
  set_reg	3, nil
  jump	:l5
l9:
  set_reg	4, nil
l5:
  for_entities_in_range	20, v_construction, nil, nil, B, :l11
  jump	:l10
l10:
  get_distance	B, nil
  .ret	
l11:
  .ret	"
`;

exports[`test2.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "p1"
  .ret	"
`;

exports[`this_arg_param.ts 1`] = `
"test:
  .name	"test"
  .pname	p1, "a"
  select_nearest	:l1, :l2, p1, signal
l1:
  notify	$txt="a"
  jump	:l0
l2:
  notify	$txt="b"
  jump	:l0
l0:
  .ret	"
`;

exports[`variable_blocks.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "p"
  set_reg	1, nil
  set_reg	2, A
  set_reg	A, p1
  set_reg	3, A
  set_reg	A, p1
  .ret	"
`;

exports[`variable_scope.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, "v"
  set_reg	p1, A
l0:
l1:
  compare_entity	:l5, A, p1
  jump	:l4
l5:
  notify	A
  set_reg	p1, A
  jump	:l4
l4:
l2:
  jump	:l0
l3:
  .ret	"
`;
