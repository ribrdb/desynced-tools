// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`if_unit_type.ts 1`] = `
"test:
  .name	"test"
  .pname	p1, a
  unit_type	p1, :l2, :l1, :l3
  jump	:l3
l1:
  notify	nil, $txt="Bot"
  jump	:l0
l2:
  notify	nil, $txt="Building"
  jump	:l0
l3:
  notify	nil, $txt="Other"
  jump	:l0
l0:
  .ret	"
`;

exports[`numeric_compare.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, v
  get_battery	A
  check_number	:l0, :l1, A, 20
  jump	:l0
l1:
  gethome	A
  domove	A
  .ret	
  jump	:l0
l0:
  get_self	A
  get_health	A, B
  check_number	:l4, :l3, B, 50
  jump	:l3
l3:
  gethome	B
  domove	B
  jump	:l2
l4:
  notify	nil, $txt="ok"
  jump	:l2
l2:
  .ret	"
`;

exports[`rng.ts 1`] = `
"rng:
  .name	"rng"
  .pname	p1, max
  .pname	p2, min
  .pname	p3, state
  unlock	
  sub	p1, p2, A
  add	A, 1, B
  check_number	:l0, :l1, p3, 0
  jump	:l1
l1:
  faction_item_amount	"metalore", p3, 
  jump	:l0
l0:
  mul	17364, p3, A
  add	A, 1, C
  modulo	C, 65521, p3
  .pname	p4
  .out	p4
  mul	B, p3, C
  div	C, 65521, A
  add	A, p2, p4
  .ret	
  .ret	"
`;

exports[`test1.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, v
  check_battery	:l1
  jump	:l0
l1:
  .ret	
  jump	:l0
l0:
  solve	p1, A, :l3
  jump	:l4
l3:
  notify	nil, $txt="no solution"
  jump	:l2
l4:
  notify	nil, $txt="solved"
  jump	:l2
l2:
  value_type	A, :l6, :l7, :l8, :l9, :l9, :l9
  jump	:l9
l6:
  set_reg	1, nil
  jump	:l5
l7:
  set_reg	2, nil
  jump	:l5
l8:
  set_reg	3, nil
  jump	:l5
l9:
  set_reg	4, nil
l5:
  for_entities_in_range	20, "v_construction", nil, nil, A, :l11
  jump	:l10
l10:
  get_distance	A, nil
  .ret	
l11:
  .ret	"
`;

exports[`assign_to_undefined.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, u
  .pname	p2, v
  set_reg	nil, p1
  set_reg	nil, p2
  .ret	"
`

exports[`call_with_computation.ts 1`] = `
"foo:
  .name	"foo"
  .pname	p1, v
  sub	p1, 1, A
  set_number	p1, A, nil
  .ret	"
`
